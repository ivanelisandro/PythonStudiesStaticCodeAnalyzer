type: edu
files:
  - name: analyzer/code_analyzer.py
    visible: true
    text: |
      # write your code here
    learner_created: false
  - name: test/this_stage/test_3.py
    visible: false
    text: |
      class Test:
          def __init__(self, alpha, beta=1):
              self.alpha = alpha
              self.beta = beta
      
          def function(self):
              print(self.alpha)
      
          def mutable_var(self, s=[]):
              print(s)
      
          def okey(self, s=None):
              print("okey")
    learner_created: false
  - name: test/this_stage/test_4.py
    visible: false
    text: |
      class Test:
          def __init__(self, alpha, Beta=1):
              self.alpha = alpha
      
          def function(self):
              print(self.alpha)
      
          def okey(self, s=None):
              print("okey")
    learner_created: false
  - name: test/this_stage/test_5.py
    visible: false
    text: |
      class Test:
          def __init__(self, alpha, beta=1):
              Beta = beta
      
          def function(self):
              print("Beta")
      
          def okey(self, s=None):
              Variable = s
              print(Variable)
    learner_created: false
  - name: test/__init__.py
    visible: false
    learner_created: false
  - name: test/test_1.py
    visible: false
    text: |
      print('What\'s your name?') # reading an input
      name = input();
      print(f'Hello, {name}');  # here is an obvious comment: this prints greeting with a name
      
      
      very_big_number = 11_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000
      print(very_big_number)
      
      
      
      def some_fun():
          print('NO TODO HERE;;')
          pass; # Todo something
    learner_created: false
  - name: test/test_2.py
    visible: false
    text: |
      class  Person:
          pass
      
      class user:
      
          def __init__(self):
              pass
      
          @staticmethod
          def _print1():
              print('q')
      
          @staticmethod
          def Print2():
              print('q')
    learner_created: false
  - name: test/tests.py
    visible: false
    text: |
      from hstest.stage_test import *
      from hstest.test_case import TestCase
      import os, re
      
      TOO_LONG_LINE = 'Too long line is not mentioned. '
      error_code_long = "s001"
      
      INDENTATION = "Invalid check of indentation. "
      error_code_indention = "s002"
      
      UNNECESSARY_SEMICOLON = "Your program passed the line with an unnecessary semicolon or has an incorrect format. "
      error_code_semicolon = "s003"
      
      TWO_SPACES_BEFORE_COMMENT = "The program should warn about the line with less than 2 spaces before a comment. "
      error_code_comments = "s004"
      
      TODO = "Your program passed the line with TODO comment or has an incorrect format. "
      error_code_todo = "s005"
      
      TOO_MANY_BLANK_LINES = "Your program didn't warn about more than two blank lines between lines. "
      error_code_blank_lines = "s006"
      
      error_code_class_def_spaces = "s007"
      SPACES_AFTER_CLASS_FUNC = "Your program should warn about multiple spaces after keyword 'class' and 'def'. "
      
      error_code_class_name = "s008"
      CLASS_NAME = "The program should warn about incorrect class name. "
      
      error_code_func_name = "s009"
      FUNC_NAME = "The program passed the function with the name not in snake_case style. "
      
      error_code_arg_name = "s010"
      ARG_NAME = "Your program should warn about function argument written not in snake_case style. "
      
      error_code_var_func_name = "s011"
      VAR_FUNC_NAME = "The program omitted warning about incorrect variable name in the function's body. " \
                      "It should be written in the snake_case style. "
      
      error_code_default_argument_is_mutable = "s012"
      MUTABLE_ARG = "The program didn't warn about mutable function argument. "
      
      FALSE_ALARM = "False alarm. Your program warned about correct line. "
      
      cur_dir = os.path.abspath(os.curdir)
      
      
      class AnalyzerTest(StageTest):
          def generate(self) -> List[TestCase]:
              return [TestCase(args=[f"test{os.sep}test_1.py"], check_function=self.test_1),
                      TestCase(args=[f"test{os.sep}test_2.py"], check_function=self.test_2),
                      TestCase(args=[f"test{os.sep}this_stage{os.sep}test_3.py"], check_function=self.test_3),
                      TestCase(args=[f"test{os.sep}this_stage{os.sep}test_4.py"], check_function=self.test_4),
                      TestCase(args=[f"test{os.sep}this_stage{os.sep}test_5.py"], check_function=self.test_5),
                      TestCase(args=[cur_dir + f"{os.sep}test{os.sep}this_stage"], check_function=self.test_common)]
      
          # Stages 1-2 tests
          def test_1(self, output: str, attach):
              file_path = f"test{os.sep}test_1.py"
              output = output.strip().lower().splitlines()
      
              if len(output) != 9:
                  return CheckResult.wrong("A wrong number of warning messages. "
                                           "Your program should warn about nine mistakes in this test case")
      
              if not (output[0].startswith(f"{file_path}: line 1: s004") or
                      output[7].startswith(f"{file_path}: line 13: s004")):
                  return CheckResult.wrong(TWO_SPACES_BEFORE_COMMENT)
      
              if not (output[1].startswith(f"{file_path}: line 2: s003") or
                      output[3].startswith(f"{file_path}: line 3: s003") or
                      output[6].startswith(f"{file_path}: line 13: s003")):
                  return CheckResult.wrong(UNNECESSARY_SEMICOLON)
      
              if not (output[2].startswith(f"{file_path}: line 3: s001") or
                      output[4].startswith(f"{file_path}: line 6: s001")):
                  return CheckResult.wrong(TOO_LONG_LINE)
      
              if not (output[5].startswith(f"{file_path}: line 11: s006")):
                  return CheckResult.wrong(TOO_MANY_BLANK_LINES)
      
              if not output[8].startswith(f"{file_path}: line 13: s005"):
                  return CheckResult.wrong(TODO)
      
              return CheckResult.correct()
      
          # Stage 4 tests
          def test_2(self, output: str, attach):
              file_path = f"test{os.sep}test_2.py"
              output = output.strip().lower().splitlines()
              if not output:
                  return CheckResult.wrong("It looks like there is no messages from your program.")
      
              for issue in output:
                  if issue.startswith(f"{file_path}: line 6: ") or issue.startswith(f"{file_path}: line 10: "):
                      return CheckResult.wrong(FALSE_ALARM)
      
              if not len(output) == 3:
                  return CheckResult.wrong("A wrong number of warning messages. "
                                           "Your program should warn about three mistakes in this test case")
              if not output[0].startswith(f"{file_path}: line 1: {error_code_class_def_spaces}"):
                  return CheckResult.wrong(SPACES_AFTER_CLASS_FUNC)
              if not output[1].startswith(f"{file_path}: line 4: {error_code_class_name}"):
                  return CheckResult.wrong(CLASS_NAME)
              if not output[2].startswith(f"{file_path}: line 14: {error_code_func_name}"):
                  return CheckResult.wrong(FUNC_NAME)
      
              return CheckResult.correct()
      
          # Default variable is mutable test
          def test_3(self, output: str, attach):
              file_path = f"test{os.sep}this_stage{os.sep}test_3.py"
              output = output.strip().lower().splitlines()
              if not output:
                  return CheckResult.wrong("It looks like there is no messages from your program.")
              for issue in output:
                  if issue.startswith(f"{file_path}: line 1: "):
                      return CheckResult.wrong(FALSE_ALARM)
                  if (issue.startswith(f"{file_path}: line 2: {error_code_default_argument_is_mutable}") or
                          issue.startswith(f"{file_path}: line 6: {error_code_default_argument_is_mutable}") or
                          issue.startswith(f"{file_path}: line 12: {error_code_default_argument_is_mutable}")):
                      return CheckResult.wrong(FALSE_ALARM + "The program pointed correct function arguments as mutable.")
      
              if not len(output) == 1:
                  return CheckResult.wrong("A wrong number of warning messages. "
                                           "Your program should warn about one mistake in this test case")
      
              if not output[0].startswith(f"{file_path}: line 9: {error_code_default_argument_is_mutable}"):
                  return CheckResult.wrong(MUTABLE_ARG)
      
              return CheckResult.correct()
      
          # Argument name test
          def test_4(self, output, attach):
              file_path = f"test{os.sep}this_stage{os.sep}test_4.py"
              output = output.strip().lower().splitlines()
      
              if not output:
                  return CheckResult.wrong("It looks like there is no messages from your program.")
      
              for issue in output:
                  if issue.startswith(f"{file_path}: line 1: "):
                      return CheckResult.wrong(FALSE_ALARM)
                  if issue.startswith(f"{file_path}: line 6: {error_code_arg_name}"):
                      return CheckResult.wrong(FALSE_ALARM)
                  if issue.startswith(f"{file_path}: line 9: {error_code_arg_name}"):
                      return CheckResult.wrong(FALSE_ALARM + "Default value of argument was None.")
      
              if not len(output) == 1:
                  return CheckResult.wrong("A wrong number of warning messages. "
                                           "Your program should warn about one mistake in this test case")
      
              if not output[0].startswith(f"{file_path}: line 2: {error_code_arg_name}"):
                  return CheckResult.wrong(ARG_NAME)
      
              return CheckResult.correct()
      
          # Variable name test
          def test_5(self, output, attach):
              file_path = f"test{os.sep}this_stage{os.sep}test_5.py"
              output = output.strip().lower().splitlines()
              if len(output) < 1:
                  return CheckResult.wrong("It looks like there is no messages from your program.")
      
              for issue in output:
                  if issue.startswith(f"{file_path}: line 1: "):
                      return CheckResult.wrong(FALSE_ALARM)
                  if issue.startswith(f"{file_path}: line 6: {error_code_var_func_name}"):
                      return CheckResult.wrong(FALSE_ALARM + "It was a part of the string - not a variable. ")
                  if issue.startswith(f"{file_path}: line 8: {error_code_var_func_name}"):
                      return CheckResult.wrong(FALSE_ALARM + "The None keyword starts with a capital letter. ")
      
              if not len(output) == 2:
                  return CheckResult.wrong("Incorrect number of warning messages. "
                                           "Your program should warn about two mistakes in this test case.")
              for i, j in enumerate([3, 9]):
                  if not output[i].startswith(f"{file_path}: line {j}: {error_code_var_func_name}"):
                      return CheckResult.wrong(VAR_FUNC_NAME)
      
              return CheckResult.correct()
      
          def test_common(self, output, attach):
              file_1 = f"test{os.sep}this_stage{os.sep}test_3.py"
              file_2 = f"test{os.sep}this_stage{os.sep}test_4.py"
              file_3 = f"test{os.sep}this_stage{os.sep}test_5.py"
      
              output = output.strip().lower().splitlines()
      
              if len(output) != 4:
                  return CheckResult.wrong("It looks like there is an incorrect number of error messages. "
                                           f"Expected 4 lines, found {len(output)}")
      
              if file_1 not in output[0] or file_2 not in output[1] or file_3 not in output[2]:
                  return CheckResult.wrong("Incorrect output format.\n"
                                           "Make sure that the files in the output are sorted "
                                           "according to the file name, line number, and issue code.")
      
              # negative tests
              for issue in output:
                  if f"{file_1}: line 1: " in issue:
                      return CheckResult.wrong(FALSE_ALARM)
                  if f"{file_1}: line 2: {error_code_default_argument_is_mutable}" in issue or \
                          f"{file_1}: line 6: {error_code_default_argument_is_mutable}" in issue or \
                          f"{file_1}: line 12: {error_code_default_argument_is_mutable}" in issue:
                      return CheckResult.wrong(FALSE_ALARM + "The program pointed correct function arguments as mutable.")
      
                  if f"{file_2}: line 1: " in issue:
                      return CheckResult.wrong(FALSE_ALARM)
                  if f"{file_2}: line 6: {error_code_arg_name}" in issue:
                      return CheckResult.wrong(FALSE_ALARM)
                  if f"{file_2}: line 9: {error_code_arg_name}" in issue:
                      return CheckResult.wrong(FALSE_ALARM + "Default value of argument was None.")
      
                  if f"{file_3}: line 1: " in issue:
                      return CheckResult.wrong(FALSE_ALARM)
                  if f"{file_3}: line 6: {error_code_var_func_name}" in issue:
                      return CheckResult.wrong(FALSE_ALARM + "It was a part of the string - not a variable. ")
                  if f"{file_3}: line 8: {error_code_var_func_name}" in issue:
                      return CheckResult.wrong(FALSE_ALARM + "The None keyword starts with a capital letter. ")
      
              # test_3 file
              if f"{file_1}: line 9: {error_code_default_argument_is_mutable}" not in output[0]:
                  return CheckResult.wrong(MUTABLE_ARG)
      
              # test_4 file
              if f"{file_2}: line 2: {error_code_arg_name}" not in output[1]:
                  return CheckResult.wrong(ARG_NAME)
      
              # test_5 file
              for i, j in enumerate([3, 9]):
                  if f"{file_3}: line {j}: {error_code_var_func_name}" not in output[i+2]:
                      return CheckResult.wrong(VAR_FUNC_NAME)
      
              return CheckResult.correct()
      
      
      if __name__ == '__main__':
          AnalyzerTest("analyzer.code_analyzer").run_tests()
    learner_created: false
  - name: tests.py
    visible: false
    text: |-
      from test.tests import AnalyzerTest
      
      if __name__ == '__main__':    AnalyzerTest("analyzer.code_analyzer").run_tests()
    learner_created: false
  - name: analyzer/validators.py
    visible: true
    text: |
      from rules import Rules
      from source_retriever import SourceFile, SourceProject
      
      
      class RulesValidator:
          rules = Rules.all
      
          def validate(self, path, lines):
              if not lines:
                  return
      
              for index, line_content in enumerate(lines, start=1):
                  for rule in self.rules:
                      error = rule.verify(index, line_content)
                      if error:
                          print(f"{path}: {error}")
      
      
      class ProjectValidator:
          validator = RulesValidator()
      
          def run(self, project_path):
              for file_path in SourceProject.get_files(project_path):
                  lines = SourceFile.get_lines(file_path)
      
                  self.validator.validate(file_path, lines)
    learner_created: true
  - name: analyzer/source_retriever.py
    visible: true
    text: |+
      from os.path import exists, isdir, isfile
      from os import scandir
      
      
      class SourceFile:
          @staticmethod
          def get_lines(file_path):
              if not exists(file_path):
                  print("File not found.")
                  return None
      
              with open(file_path, encoding='utf-8', mode='r') as file:
                  for line in file.readlines():
                      yield line
      
      
      class SourceDirectory:
          @staticmethod
          def get_files(directory_path):
              for entry in scandir(directory_path):
                  if entry.is_file():
                      yield entry.path
                  if entry.is_dir():
                      yield from SourceDirectory.get_files(entry.path)
      
      
      class SourceProject:
          @staticmethod
          def get_files(start_path):
              if not exists(start_path):
                  print("File not found.")
                  return None
      
              if isfile(start_path):
                  yield start_path
              elif isdir(start_path):
                  yield from SourceDirectory.get_files(start_path)
    
    learner_created: true
  - name: analyzer/rules.py
    visible: true
    text: |
      from abc import abstractmethod
      import re
      
      
      class Patterns:
          ignore_strings = r"(?<!\\)'([\w\ \?\!\{\},;:\.]|(\\'))+(?<!\\)'"
          ignore_comments = r"\#.+"
          whitespaces_exact = r"(\ )*"
          comment_spaces = r"(\ +)\#.+"
          comment_no_spaces = r"([\w\):])\#.+"
          todo_comments = r"\# TODO.*"
          whitespaces_after_class = r"(def|class)\s{2,}"
          class_name = r"class\s{1}(\w{1,})"
          function_name = r"def\s{1}\_*([a-zA-Z0-9]{1,})\_*"
      
      
      class Rule:
          def __init__(self, code, message):
              self.code = code
              self.message = message
      
          @abstractmethod
          def verify(self, index, line_content):
              return None
      
          def get_error(self, index):
              return f"Line {index}: {self.code} {self.message}"
      
      
      class LineTooLong(Rule):
          max_characters = 79
      
          def __init__(self):
              super().__init__("S001", f"The line has more than {self.max_characters} characters.")
      
          def verify(self, index, line_content):
              if len(line_content) <= self.max_characters:
                  return None
      
              return super().get_error(index)
      
      
      class Indentation(Rule):
          multiple_of = 4
      
          def __init__(self):
              super().__init__("S002", f"Indentation must be multiple of {self.multiple_of}.")
      
          def verify(self, index, line_content):
              match_found = re.match(Patterns.whitespaces_exact, line_content)
              if not match_found:
                  return None
      
              group = match_found.group()
              if len(group) % self.multiple_of == 0:
                  return None
      
              return super().get_error(index)
      
      
      class Semicolon(Rule):
          def __init__(self):
              super().__init__("S003", f"Unnecessary semicolon after statement.")
      
          def verify(self, index, line_content):
              filtered_line = re.sub(Patterns.ignore_strings, "", line_content)
              filtered_line = re.sub(Patterns.ignore_comments, "", filtered_line)
              if ";" not in filtered_line:
                  return None
      
              return super().get_error(index)
      
      
      class SpacesBeforeComment(Rule):
          required_spaces = 2
      
          def __init__(self):
              super().__init__("S004", f"There must be {self.required_spaces} spaces before inline comments.")
      
          def verify(self, index, line_content):
              filtered_line = re.sub(Patterns.ignore_strings, "", line_content)
              comment_with_spaces = re.search(Patterns.comment_spaces, filtered_line)
              comment_no_spaces = re.search(Patterns.comment_no_spaces, filtered_line)
      
              if not comment_with_spaces and not comment_no_spaces:
                  return None
      
              if comment_with_spaces:
                  group = comment_with_spaces.group(1)
                  if len(group) >= self.required_spaces:
                      return None
      
              return super().get_error(index)
      
      
      class Todo(Rule):
          def __init__(self):
              super().__init__("S005", f"TODO found.")
      
          def verify(self, index, line_content):
              match_found = re.search(Patterns.todo_comments, line_content, re.IGNORECASE)
              if not match_found:
                  return None
      
              return super().get_error(index)
      
      
      class BlankLinesExcess(Rule):
          max_accepted = 2
          blank = '\n'
      
          def __init__(self):
              self.count_blank = 0
              super().__init__("S006", f"More than {self.max_accepted} blank lines preceding code.")
      
          def verify(self, index, line_content):
              if line_content == self.blank:
                  self.count_blank += 1
                  return None
      
              if self.count_blank <= self.max_accepted:
                  self.count_blank = 0
                  return None
      
              self.count_blank = 0
              return super().get_error(index)
      
      
      class TooManySpacesAfterDefClass(Rule):
          def __init__(self):
              self.name = ""
              super().__init__("S007", "")
      
          def verify(self, index, line_content):
              excess_found = re.search(Patterns.whitespaces_after_class, line_content)
              if not excess_found:
                  return None
      
              self.message = f"Too many spaces after '{excess_found.group(1)}'."
              return super().get_error(index)
      
      
      class ClassShouldUseCamelCase(Rule):
          def __init__(self):
              super().__init__("S008", "")
      
          def verify(self, index, line_content):
              class_found = re.search(Patterns.class_name, line_content)
              if not class_found:
                  return None
      
              class_name = class_found.group(1)
              if class_name[0].isupper() and "_" not in class_name:
                  return None
      
              self.message = f"Class name '{class_name}' should use CamelCase."
              return super().get_error(index)
      
      
      class FunctionShouldUseSnakeCase(Rule):
          def __init__(self):
              super().__init__("S009", "")
      
          def verify(self, index, line_content):
              function_found = re.search(Patterns.function_name, line_content)
              if not function_found:
                  return None
      
              function_name = function_found.group(1)
              if not any(character.isupper() for character in function_name):
                  return None
      
              self.message = f"Function name '{function_name}' should use snake_case."
              return super().get_error(index)
      
      
      class Rules:
          all = [LineTooLong(), Indentation(),
                 Semicolon(), SpacesBeforeComment(),
                 Todo(), BlankLinesExcess(),
                 TooManySpacesAfterDefClass(),
                 ClassShouldUseCamelCase(),
                 FunctionShouldUseSnakeCase()]
    learner_created: true
  - name: analyzer/Stage1.md
    visible: true
    text: |-
      # Stage 1:
      
      ## Example input:
      ```
      print('What\'s your name?')
      name = input()
      print(f'Hello, {name}')  # here is an obvious comment: this prints a greeting with a name
      
      very_big_number = 11_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000
      print(very_big_number)
      ```
      
      ## Example output:
      ```
      Line 3: S001 Too long
      Line 5: S001 Too long
      ```
    learner_created: true
  - name: analyzer/Stage4.md
    visible: true
    text: "# Stage 2:\n\nAdd naming rules:\n- S007: Too many spaces after construction_name\
    \ (def or class);\n- S008: Class name class_name should be written in CamelCase;\n\
    - S009: Function name function_name should be written in snake_case.\n\n\n## Generic\
    \ examples:\n```\n# a simple class\nclass MyClass:\n    pass\n\n# a class based\
    \ on inheritance\nclass MyClass(AnotherClass):\n    pass\n    \n# a simple function\n\
    def do_magic():\n    pass\n```\n\n## Example input:\n```\nclass  Person:\n   \
    \ pass\n\nclass user:\n\n    def __init__(self, login: str, password: str):\n\
    \        self.login = login\n        self.password = password\n\n    @staticmethod\n\
    \    def _print1():\n        print('q')\n\n    @staticmethod\n    def Print2():\n\
    \        print('q')\n```\n\n## Example output:\n```\n/path/to/file/script.py:\
    \ Line 1: S007 Too many spaces after 'class'\n/path/to/file/script.py: Line 4:\
    \ S008 Class name 'user' should use CamelCase\n/path/to/file/script.py: Line 15:\
    \ S009 Function name 'Print2' should use snake_case\n```"
    learner_created: true
  - name: analyzer/Stage2.md
    visible: true
    text: |-
      # Stage 2:
      
      Add more rules:
      - S002: Indentation is not a multiple of four;
      - S003: Unnecessary semicolon after a statement (note that semicolons are acceptable in comments);
      - S004: Less than two spaces before inline comments;
      - S005: TODO found (in comments only and case-insensitive);
      - S006: More than two blank lines preceding a code line (applies to the first non-empty line).
      
      
      ## Example input:
      ```
      print('What\'s your name?') # reading an input
      name = input();
      print(f'Hello, {name}');  # here is an obvious comment: this prints a greeting with a name
      
      
      very_big_number = 11_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000
      print(very_big_number)
      
      
      
      def some_fun():
          print('NO TODO HERE;;')
          pass; # Todo something
      ```
      
      ## Example output:
      ```
      Line 1: S004 At least two spaces required before inline comments
      Line 2: S003 Unnecessary semicolon
      Line 3: S001 Too long
      Line 3: S003 Unnecessary semicolon
      Line 6: S001 Too long
      Line 11: S006 More than two blank lines used before this line
      Line 13: S003 Unnecessary semicolon
      Line 13: S004 At least two spaces required before inline comments
      Line 13: S005 TODO found
      ```
    learner_created: true
  - name: analyzer/Stage3.md
    visible: true
    text: |-
      # Stage 2:
      
      Process multi-file projects:
      - Project directory must now be a command-line argument;
      - Example:
      ```
      python code_analyzer.py directory-or-file
      ```
      - Output should contain path to the analyzed file;
      - Example:
      ```
      Path: Line X: Code Message
      ```
      - Output lines must be sorted in ascending order by file name, line number, and issue code.
      - Ignore Non-Python files;
      
      
      ## Example 1. Only a single file is specified as the input:
      ```
      > python code_analyzer.py /path/to/file/script.py
      /path/to/file/script.py: Line 1: S004 At least two spaces required before inline comments
      /path/to/file/script.py: Line 2: S003 Unnecessary semicolon
      /path/to/file/script.py: Line 3: S001 Too long line
      /path/to/file/script.py: Line 3: S003 Unnecessary semicolon
      /path/to/file/script.py: Line 6: S001 Too long line
      /path/to/file/script.py: Line 11: S006 More than two blank lines used before this line
      /path/to/file/script.py: Line 13: S003 Unnecessary semicolon
      /path/to/file/script.py: Line 13: S004 At least two spaces required before inline comments
      /path/to/file/script.py: Line 13: S005 TODO found
      ```
      
      ## Example 2. The input path is a directory; the output should contain all Python files from it:
      ```
      > python code_analyzer.py /path/to/project
      /path/to/project/__init__.py: Line 1: S001 Too long line
      /path/to/project/script1.py: Line 1: S004 At least two spaces required before inline comments
      /path/to/project/script1.py: Line 2: S003 Unnecessary semicolon
      /path/to/project/script2.py: Line 1: S004 At least two spaces required before inline comments
      /path/to/project/script2.py: Line 3: S001 Too long line
      /path/to/project/somedir/script.py: Line 3: S001 Too long line
      /path/to/project/test.py: Line 3: Line 13: S003 Unnecessary semicolon
      ```
    learner_created: true
  - name: analyzer/Stage5.md
    visible: true
    learner_created: true
  - name: analyzer/ast_rules.py
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/9907#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Sun, 29 Oct 2023 05:36:52 UTC"
record: -1
