type: edu
files:
- name: analyzer/code_analyzer.py
  visible: true
  text: |
    # write your code here
  learner_created: false
- name: test/this_stage/test_7.py
  visible: false
  text: |
    class CorrectOne:
        pass


    class spaces:
        pass


    class snake_case:
        pass


    class Inheritance(CorrectOne):
        pass
  learner_created: false
- name: test/this_stage/test_8.py
  visible: false
  text: |
    class      CorrectOne:
        pass


    class Inheritance(CorrectOne):
        @staticmethod
        def  test():
            print("hello")
  learner_created: false
- name: test/this_stage/test_9.py
  visible: false
  text: |
    def __init__():
        def correct_function():
            pass

        pass


    def Wow():
        pass


    def CamelCase():
        pass
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/test_1.py
  visible: false
  text: |
    print('hello')
     print('hello')
      print('hello')
        print('hello')
          print('hello')
            print('hello')
  learner_created: false
- name: test/test_2.py
  visible: false
  text: |
    print('hello')
    print('hello');
    print('hello');;;
    print('hello');  # hello
    # hello hello hello;
    greeting = 'hello;'
    print('hello')  # ;
  learner_created: false
- name: test/test_3.py
  visible: false
  text: |
    print('hello')
    print('hello')  # TODO
    print('hello')  # TODO # TODO
    # todo
    # TODO just do it
    print('todo')
    print('TODO TODO')
    todo()
    todo = 'todo'
  learner_created: false
- name: test/test_4.py
  visible: false
  text: |
    print("hello")


    print("bye")



    print("check")
  learner_created: false
- name: test/test_5.py
  visible: false
  text: |-
    print('hello!')
    # just a comment
    print('hello!')  #
    print('hello!')  # hello

    print('hello!') # hello
    print('hello!')# hello
  learner_created: false
- name: test/test_6.py
  visible: false
  text: |
    print('What\'s your name?') # reading an input
    name = input();
    print(f'Hello, {name}');  # here is an obvious comment: this prints greeting with a name


    very_big_number = 11_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000
    print(very_big_number)



    def some_fun():
        print('NO TODO HERE;;')
        pass; # Todo something
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase
    import os, re

    TOO_LONG_LINE = 'Too long line is not mentioned. '
    error_code_long = "s001"

    INDENTATION = "Invalid check of indentation. "
    error_code_indention = "s002"

    UNNECESSARY_SEMICOLON = "Your program passed the line with an unnecessary semicolon or has an incorrect format. "
    error_code_semicolon = "s003"

    TWO_SPACES_BEFORE_COMMENT = "The program should warn about the line with less than 2 spaces before a comment."
    error_code_comments = "s004"

    TODO = "Your program passed the line with TODO comment or has an incorrect format. "
    error_code_todo = "s005"

    TOO_MANY_BLANK_LINES = "Your program didn't warn about more than two blank lines between lines."
    error_code_blank_lines = "s006"

    error_code_class_def_spaces = "s007"
    SPACES_AFTER_CLASS_FUNC = "Your program should warn about multiple spaces after keyword 'class' and 'def'"

    error_code_class_name = "s008"
    CLASS_NAME = "The program should warn about incorrect class name. "

    error_code_func_name = "s009"
    FUNC_NAME = "The program passed the function with the name not in snake_case style."

    FALSE_ALARM = "False alarm. Your program warned about correct line."

    cur_dir = os.path.abspath(os.curdir)


    class AnalyzerTest(StageTest):
        def generate(self) -> List[TestCase]:
            return [TestCase(args=[f"test{os.sep}test_1.py"], check_function=self.test_1),
                    TestCase(args=[f"test{os.sep}test_2.py"], check_function=self.test_2),
                    TestCase(args=[f"test{os.sep}test_3.py"], check_function=self.test_3),
                    TestCase(args=[f"test{os.sep}test_4.py"], check_function=self.test_4),
                    TestCase(args=[f"test{os.sep}test_5.py"], check_function=self.test_5),
                    TestCase(args=[f"test{os.sep}test_6.py"], check_function=self.test_6),
                    TestCase(args=[f"test{os.sep}this_stage{os.sep}test_7.py"], check_function=self.test_7),
                    TestCase(args=[f"test{os.sep}this_stage{os.sep}test_8.py"], check_function=self.test_8),
                    TestCase(args=[f"test{os.sep}this_stage{os.sep}test_9.py"], check_function=self.test_9),
                    TestCase(args=[cur_dir + f"{os.sep}test{os.sep}this_stage"], check_function=self.test_common)]

        # Check of indention violation
        def test_1(self, output: str, attach):
            file_path = f"test{os.sep}test_1.py"
            output = output.strip().lower().splitlines()
            if not len(output) == 3:
                return CheckResult.wrong("Incorrect number of warning messages. "
                                         "Your program should warn about 3 lines with mistakes.\n"
                                         "Choose only those lines where indentation is not a multiple of four.")
            for line in output:
                if not line.startswith(file_path):
                    return CheckResult.wrong("There is no relative path to the analyzed file in your output "
                                             "or the output has incorrect format.\n"
                                             "Make sure you did not change the relative path to the absolute path "
                                             "when you print the message.")
                elif re.search('line[\d]', line) is not None:
                    return CheckResult.wrong('Incorrect format of an error message')
            if not output[0].startswith(f"{file_path}: line 2: {error_code_indention}"):
                return CheckResult.wrong(INDENTATION + "Your program passed the row with single column indent.")
            if not output[1].startswith(f"{file_path}: line 3: {error_code_indention}"):
                return CheckResult.wrong(INDENTATION + "Your program passed the row with two columns indent.")
            if not output[2].startswith(f"{file_path}: line 5: {error_code_indention}"):
                return CheckResult.wrong(INDENTATION + "Your program passed the row with six columns indent.")
            return CheckResult.correct()

        # Test of semicolon violation
        def test_2(self, output: str, attach):
            file_path = f"test{os.sep}test_2.py"
            output = output.strip().lower().splitlines()
            if not output:
                return CheckResult.wrong("It looks like there is no messages from your program.")

            # negative tests
            for issue in output:
                if issue.startswith(f"{file_path}: line 1: {error_code_semicolon}"):
                    return CheckResult.wrong(FALSE_ALARM + "There was no any semicolons at all.")
                if issue.startswith(f"{file_path}: line 5: {error_code_semicolon}") or issue.startswith(
                        f"line 8 {error_code_semicolon}"):
                    return CheckResult.wrong(FALSE_ALARM + "The semicolon was a part of comment block")
                if issue.startswith(f"{file_path}: line 6: {error_code_semicolon}") or issue.startswith(
                        f"line 7 {error_code_semicolon}"):
                    return CheckResult.wrong(FALSE_ALARM + "The semicolon was a part of string")

            # positive tests
            if not len(output) == 3:
                return CheckResult.wrong("Incorrect number of warning messages.")
            for i, j in enumerate([2, 3, 4]):
                if not output[i].startswith(f"{file_path}: line {j}: {error_code_semicolon}"):
                    return CheckResult.wrong(UNNECESSARY_SEMICOLON)
            return CheckResult.correct()

        # Test of todo_comments
        def test_3(self, output: str, attach):
            file_path = f"test{os.sep}test_3.py"
            output = output.strip().lower().splitlines()
            if not output:
                return CheckResult.wrong("It looks like there is no messages from your program.")

            # negative tests
            for issue in output:
                if issue.startswith(f"{file_path}: line 1: {error_code_todo}") or issue.startswith(
                        f"line 8 {error_code_todo}") or \
                        issue.startswith(f"line 9: {error_code_todo}"):
                    return CheckResult.wrong(FALSE_ALARM + "There was no any TODO comments")
                if issue.startswith(f"{file_path}: line 6: {error_code_todo}") or issue.startswith(
                        f"line 7 {error_code_todo}"):
                    return CheckResult.wrong(FALSE_ALARM + "TODO is inside of string")

            # positive tests
            if not len(output) == 4:
                return CheckResult.wrong("A wrong number of warning messages. "
                                         "Your program should warn about 4 lines with mistakes in this test case.\n"
                                         "4 lines that include TODO comments should be found")
            for i, j in enumerate([2, 3, 4, 5]):
                if not output[i].startswith(f"{file_path}: line {j}: {error_code_todo}"):
                    return CheckResult.wrong(TODO)

            return CheckResult.correct()

        # Blank lines test
        def test_4(self, output, attach):
            file_path = f"test{os.sep}test_4.py"
            output = output.strip().lower().splitlines()
            if len(output) != 1:
                if len(output) == 0:
                    return CheckResult.wrong(TOO_MANY_BLANK_LINES)
                if output[0].startswith(f"{file_path}: line 4: {error_code_blank_lines}"):
                    return CheckResult.wrong(FALSE_ALARM)
                if not output[0].startswith(f"{file_path}: line 8: {error_code_blank_lines}"):
                    return CheckResult.wrong(TOO_MANY_BLANK_LINES)
                else:
                    return CheckResult.wrong(TOO_MANY_BLANK_LINES)
            return CheckResult.correct()

        # Test of comments style
        def test_5(self, output, attach):
            file_path = f"test{os.sep}test_5.py"
            output = output.strip().lower().splitlines()
            if not output:
                return CheckResult.wrong("It looks like there is no messages from your program.")

            # negative tests
            for issue in output:
                if issue.startswith(f"{file_path}: line 1: {error_code_comments}"):
                    return CheckResult.wrong(FALSE_ALARM + "There is no comments at all.")
                if issue.startswith(f"{file_path}: line 2: {error_code_comments}"):
                    return CheckResult.wrong(FALSE_ALARM + "There is a correct line with comment")
                if issue.startswith(f"{file_path}: line 3: {error_code_comments}" or
                                    issue.startswith(f"{file_path}: line 4: {error_code_comments}")):
                    return CheckResult.wrong(FALSE_ALARM + "It is a correct line with a comment after code.")

            # positive test
            if not len(output) == 2:
                return CheckResult.wrong("Incorrect number of warning messages. "
                                         "Your program should warn about two mistakes in this test case.")
            for i, j in enumerate([6, 7]):
                if not output[i].startswith(f"{file_path}: line {j}: {error_code_comments}"):
                    return CheckResult.wrong(TWO_SPACES_BEFORE_COMMENT)

            return CheckResult.correct()

        def test_6(self, output, attach):
            file_path = f"test{os.sep}test_6.py"
            output = output.strip().lower().splitlines()

            if len(output) != 9:
                return CheckResult.wrong("It looks like there is no messages from your program.")

            if not (output[0].startswith(f"{file_path}: line 1: s004") or
                    output[7].startswith(f"{file_path}: line 13: s004")):
                return CheckResult.wrong(TWO_SPACES_BEFORE_COMMENT)

            if not (output[1].startswith(f"{file_path}: line 2: s003") or
                    output[3].startswith(f"{file_path}: line 3: s003") or
                    output[6].startswith(f"{file_path}: line 13: s003")):
                return CheckResult.wrong(UNNECESSARY_SEMICOLON)

            if not (output[2].startswith(f"{file_path}: line 3: s001") or
                    output[4].startswith(f"{file_path}: line 6: s001")):
                return CheckResult.wrong(TOO_LONG_LINE)

            if not (output[5].startswith(f"{file_path}: line 11: s006")):
                return CheckResult.wrong(TOO_MANY_BLANK_LINES)

            if not output[8].startswith(f"{file_path}: line 13: s005"):
                return CheckResult.wrong(TODO)

            return CheckResult.correct()

        # Class name test
        def test_7(self, output, attach):
            file_path = f"test{os.sep}this_stage{os.sep}test_7.py"
            output = output.strip().lower().splitlines()

            if not output:
                return CheckResult.wrong("It looks like there is no messages from your program.")

            for issue in output:
                if (issue.startswith(f"{file_path}: line 1: {error_code_class_name}") or
                        issue.startswith(f"{file_path}: line 13: {error_code_class_name}")):
                    return CheckResult.wrong(FALSE_ALARM)

            if not len(output) == 2:
                return CheckResult.wrong("A wrong number of warning messages. "
                                         "Your program should warn about two mistakes in this test case")

            if not output[0].startswith(f"{file_path}: line 5: {error_code_class_name}") or \
                    not output[1].startswith(f"{file_path}: line 9: {error_code_class_name}"):
                return CheckResult.wrong(CLASS_NAME + "The class had name in snake_case style.")

            return CheckResult.correct()

        # "Spaces after keywords 'class' and 'def'" test
        def test_8(self, output, attach):
            file_path = f"test{os.sep}this_stage{os.sep}test_8.py"
            output = output.strip().lower().splitlines()

            if not output:
                return CheckResult.wrong("It looks like there is no messages from your program.")

            for issue in output:
                if issue.startswith(f"{file_path}: line 5: {error_code_class_def_spaces}"):
                    return CheckResult.wrong(FALSE_ALARM)

            if not len(output) == 2:
                return CheckResult.wrong("A wrong number of warning messages. "
                                         "Your program should warn about two mistakes in this test case")

            for i, j in enumerate([1, 7]):
                if not output[i].startswith(f"{file_path}: line {j}: {error_code_class_def_spaces}"):
                    return CheckResult.wrong(SPACES_AFTER_CLASS_FUNC)

            return CheckResult.correct()

        # function name test
        def test_9(self, output, attach):
            file_path = f"test{os.sep}this_stage{os.sep}test_9.py"
            output = output.strip().lower().splitlines()

            if not output:
                return CheckResult.wrong("It looks like there is no messages from your program.")

            for issue in output:
                if (issue.startswith(f"{file_path}: line 1: {error_code_func_name}") or
                        issue.startswith(f"{file_path}: line 2: {error_code_func_name}")):
                    return CheckResult.wrong(FALSE_ALARM)

            if not len(output) == 2:
                return CheckResult.wrong("A wrong number of warning messages. "
                                         "Your program should warn about 2 lines with mistakes in this test case.\n"
                                         "2 function names not in snake_case style should be found.")

            for i, j in enumerate([8, 12]):
                if not output[i].startswith(f"{file_path}: line {j}: {error_code_func_name}"):
                    return CheckResult.wrong(FUNC_NAME)

            return CheckResult.correct()

        def test_common(self, output, attach):
            file_1 = f"test{os.sep}this_stage{os.sep}test_7.py"
            file_2 = f"test{os.sep}this_stage{os.sep}test_8.py"
            file_3 = f"test{os.sep}this_stage{os.sep}test_9.py"

            output = output.strip().lower().splitlines()

            if not len(output) == 6:
                return CheckResult.wrong("It looks like there is an incorrect number of error messages. "
                                         f"Expected 6 lines, found {len(output)}")

            if file_1 not in output[0] or file_2 not in output[2] or file_3 not in output[4]:
                return CheckResult.wrong("Incorrect output format.\n"
                                         "Make sure that the files in the output are sorted "
                                         "according to the file name, line number, and issue code.")

            # negative tests
            for issue in output:
                if f"{file_1}: line 1: {error_code_class_name}" in issue or \
                        f"{file_1}: line 13: {error_code_class_name}" in issue:
                    return CheckResult.wrong(FALSE_ALARM)
                if f"{file_2}: line 5: {error_code_class_def_spaces}" in issue:
                    return CheckResult.wrong(FALSE_ALARM)
                if f"{file_3}: line 1: {error_code_func_name}" in issue or \
                        f"{file_3}: line 2: {error_code_func_name}" in issue:
                    return CheckResult.wrong(FALSE_ALARM)

            # test_7 file
            if f"{file_1}: line 5: {error_code_class_name}" not in output[0] or \
                    f"{file_1}: line 9: {error_code_class_name}" not in output[1]:
                return CheckResult.wrong(CLASS_NAME + "The class had name in snake_case style.")

            # test_8 file
            for i, j in enumerate([1, 7]):
                if f"{file_2}: line {j}: {error_code_class_def_spaces}" not in output[i+2]:
                    return CheckResult.wrong(SPACES_AFTER_CLASS_FUNC)

            # test_9 file
            for i, j in enumerate([8, 12]):
                if f"{file_3}: line {j}: {error_code_func_name}" not in output[i+4]:
                    return CheckResult.wrong(FUNC_NAME)

            return CheckResult.correct()


    if __name__ == '__main__':
        AnalyzerTest("analyzer.code_analyzer").run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |-
    from test.tests import AnalyzerTest

    if __name__ == '__main__':    AnalyzerTest("analyzer.code_analyzer").run_tests()
  learner_created: false
- name: analyzer/validators.py
  visible: true
  text: |
    from rules import LineTooLong, Indentation, Semicolon, SpacesBeforeComment, Todo, BlankLinesExcess
    from source_retriever import SourceFile, SourceProject


    class RulesValidator:
        rules = [LineTooLong(), Indentation(),
                 Semicolon(), SpacesBeforeComment(),
                 Todo(), BlankLinesExcess()]

        def validate(self, path, lines):
            if not lines:
                return

            for index, line_content in enumerate(lines, start=1):
                for rule in self.rules:
                    error = rule.verify(index, line_content)
                    if error:
                        print(f"{path}: {error}")


    class ProjectValidator:
        validator = RulesValidator()

        def run(self, project_path):
            for file_path in SourceProject.get_files(project_path):
                lines = SourceFile.get_lines(file_path)

                self.validator.validate(file_path, lines)
  learner_created: true
- name: analyzer/source_retriever.py
  visible: true
  text: |+
    from os.path import exists, isdir, isfile
    from os import scandir


    class SourceFile:
        @staticmethod
        def get_lines(file_path):
            if not exists(file_path):
                print("File not found.")
                return None

            with open(file_path, encoding='utf-8', mode='r') as file:
                for line in file.readlines():
                    yield line


    class SourceDirectory:
        @staticmethod
        def get_files(directory_path):
            for entry in scandir(directory_path):
                if entry.is_file():
                    yield entry.path
                if entry.is_dir():
                    yield from SourceDirectory.get_files(entry.path)


    class SourceProject:
        @staticmethod
        def get_files(start_path):
            if not exists(start_path):
                print("File not found.")
                return None

            if isfile(start_path):
                yield start_path
            elif isdir(start_path):
                yield from SourceDirectory.get_files(start_path)

  learner_created: true
- name: analyzer/rules.py
  visible: true
  text: |
    from abc import abstractmethod
    import re


    class Patterns:
        ignore_strings = r"(?<!\\)'([\w\ \?\!\{\},;:\.]|(\\'))+(?<!\\)'"
        ignore_comments = r"\#.+"
        whitespaces_exact = r"(\ )*"
        comment_spaces = r"(\ +)\#.+"
        comment_no_spaces = r"([\w\):])\#.+"
        todo_comments = r"\# TODO.*"


    class Rule:
        def __init__(self, code, message):
            self.code = code
            self.message = message

        @abstractmethod
        def verify(self, index, line_content):
            return None

        def get_error(self, index):
            return f"Line {index}: {self.code} {self.message}"


    class LineTooLong(Rule):
        max_characters = 79

        def __init__(self):
            super().__init__("S001", f"The line has more than {self.max_characters} characters.")

        def verify(self, index, line_content):
            if len(line_content) <= self.max_characters:
                return None

            return super().get_error(index)


    class Indentation(Rule):
        multiple_of = 4

        def __init__(self):
            super().__init__("S002", f"Indentation must be multiple of {self.multiple_of}.")

        def verify(self, index, line_content):
            match_found = re.match(Patterns.whitespaces_exact, line_content)
            if not match_found:
                return None

            group = match_found.group()
            if len(group) % self.multiple_of == 0:
                return None

            return super().get_error(index)


    class Semicolon(Rule):
        def __init__(self):
            super().__init__("S003", f"Unnecessary semicolon after statement.")

        def verify(self, index, line_content):
            filtered_line = re.sub(Patterns.ignore_strings, "", line_content)
            filtered_line = re.sub(Patterns.ignore_comments, "", filtered_line)
            if ";" not in filtered_line:
                return None

            return super().get_error(index)


    class SpacesBeforeComment(Rule):
        required_spaces = 2

        def __init__(self):
            super().__init__("S004", f"There must be {self.required_spaces} spaces before inline comments.")

        def verify(self, index, line_content):
            filtered_line = re.sub(Patterns.ignore_strings, "", line_content)
            comment_with_spaces = re.search(Patterns.comment_spaces, filtered_line)
            comment_no_spaces = re.search(Patterns.comment_no_spaces, filtered_line)

            if not comment_with_spaces and not comment_no_spaces:
                return None

            if comment_with_spaces:
                group = comment_with_spaces.group(1)
                if len(group) >= self.required_spaces:
                    return None

            return super().get_error(index)


    class Todo(Rule):
        def __init__(self):
            super().__init__("S005", f"TODO found.")

        def verify(self, index, line_content):
            match_found = re.search(Patterns.todo_comments, line_content, re.IGNORECASE)
            if not match_found:
                return None

            return super().get_error(index)


    class BlankLinesExcess(Rule):
        max_accepted = 2
        blank = '\n'

        def __init__(self):
            self.count_blank = 0
            super().__init__("S006", f"More than {self.max_accepted} blank lines preceding code.")

        def verify(self, index, line_content):
            if line_content == self.blank:
                self.count_blank += 1
                return None

            if self.count_blank <= self.max_accepted:
                self.count_blank = 0
                return None

            self.count_blank = 0
            return super().get_error(index)
  learner_created: true
- name: analyzer/Stage1.md
  visible: true
  text: |-
    # Stage 1:

    ## Example input:
    ```
    print('What\'s your name?')
    name = input()
    print(f'Hello, {name}')  # here is an obvious comment: this prints a greeting with a name

    very_big_number = 11_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000
    print(very_big_number)
    ```

    ## Example output:
    ```
    Line 3: S001 Too long
    Line 5: S001 Too long
    ```
  learner_created: true
- name: analyzer/Stage4.md
  visible: true
  text: "# Stage 2:\n\nAdd naming rules:\n- S007: Too many spaces after construction_name\
    \ (def or class);\n- S008: Class name class_name should be written in CamelCase;\n\
    - S009: Function name function_name should be written in snake_case.\n\n\n## Generic\
    \ examples:\n```\n# a simple class\nclass MyClass:\n    pass\n\n# a class based\
    \ on inheritance\nclass MyClass(AnotherClass):\n    pass\n    \n# a simple function\n\
    def do_magic():\n    pass\n```\n\n## Example input:\n```\nclass  Person:\n   \
    \ pass\n\nclass user:\n\n    def __init__(self, login: str, password: str):\n\
    \        self.login = login\n        self.password = password\n\n    @staticmethod\n\
    \    def _print1():\n        print('q')\n\n    @staticmethod\n    def Print2():\n\
    \        print('q')\n```\n\n## Example output:\n```\n/path/to/file/script.py:\
    \ Line 1: S007 Too many spaces after 'class'\n/path/to/file/script.py: Line 4:\
    \ S008 Class name 'user' should use CamelCase\n/path/to/file/script.py: Line 15:\
    \ S009 Function name 'Print2' should use snake_case\n```"
  learner_created: true
- name: analyzer/Stage2.md
  visible: true
  text: |-
    # Stage 2:

    Add more rules:
    - S002: Indentation is not a multiple of four;
    - S003: Unnecessary semicolon after a statement (note that semicolons are acceptable in comments);
    - S004: Less than two spaces before inline comments;
    - S005: TODO found (in comments only and case-insensitive);
    - S006: More than two blank lines preceding a code line (applies to the first non-empty line).


    ## Example input:
    ```
    print('What\'s your name?') # reading an input
    name = input();
    print(f'Hello, {name}');  # here is an obvious comment: this prints a greeting with a name


    very_big_number = 11_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000
    print(very_big_number)



    def some_fun():
        print('NO TODO HERE;;')
        pass; # Todo something
    ```

    ## Example output:
    ```
    Line 1: S004 At least two spaces required before inline comments
    Line 2: S003 Unnecessary semicolon
    Line 3: S001 Too long
    Line 3: S003 Unnecessary semicolon
    Line 6: S001 Too long
    Line 11: S006 More than two blank lines used before this line
    Line 13: S003 Unnecessary semicolon
    Line 13: S004 At least two spaces required before inline comments
    Line 13: S005 TODO found
    ```
  learner_created: true
- name: analyzer/Stage3.md
  visible: true
  text: |-
    # Stage 2:

    Process multi-file projects:
    - Project directory must now be a command-line argument;
    - Example:
    ```
    python code_analyzer.py directory-or-file
    ```
    - Output should contain path to the analyzed file;
    - Example:
    ```
    Path: Line X: Code Message
    ```
    - Output lines must be sorted in ascending order by file name, line number, and issue code.
    - Ignore Non-Python files;


    ## Example 1. Only a single file is specified as the input:
    ```
    > python code_analyzer.py /path/to/file/script.py
    /path/to/file/script.py: Line 1: S004 At least two spaces required before inline comments
    /path/to/file/script.py: Line 2: S003 Unnecessary semicolon
    /path/to/file/script.py: Line 3: S001 Too long line
    /path/to/file/script.py: Line 3: S003 Unnecessary semicolon
    /path/to/file/script.py: Line 6: S001 Too long line
    /path/to/file/script.py: Line 11: S006 More than two blank lines used before this line
    /path/to/file/script.py: Line 13: S003 Unnecessary semicolon
    /path/to/file/script.py: Line 13: S004 At least two spaces required before inline comments
    /path/to/file/script.py: Line 13: S005 TODO found
    ```

    ## Example 2. The input path is a directory; the output should contain all Python files from it:
    ```
    > python code_analyzer.py /path/to/project
    /path/to/project/__init__.py: Line 1: S001 Too long line
    /path/to/project/script1.py: Line 1: S004 At least two spaces required before inline comments
    /path/to/project/script1.py: Line 2: S003 Unnecessary semicolon
    /path/to/project/script2.py: Line 1: S004 At least two spaces required before inline comments
    /path/to/project/script2.py: Line 3: S001 Too long line
    /path/to/project/somedir/script.py: Line 3: S001 Too long line
    /path/to/project/test.py: Line 3: Line 13: S003 Unnecessary semicolon
    ```
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/9906#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Thu, 27 Jul 2023 09:19:47 UTC"
record: 4
